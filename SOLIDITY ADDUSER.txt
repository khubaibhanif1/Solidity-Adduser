// SPDX-License-Identifier: no-Licence
pragma solidity ^0.8.12;

contract Marathon{

    uint256 _number;
    string public _message;
    address _owner;
    uint256 public withdrawamount;
    mapping (address => bool) public Users;
    string[] public _msgAry;
    

    constructor(string memory _race){
        _message = _race; 
        _owner = msg.sender;
        
        
    }

    function printMessage() public view returns (string memory){
        return _message;
    }


  
    function number() public view returns (uint256) {
        return  _number;
    }

    function addition(uint256 a, uint256 b) public pure returns(uint256){
        return a+b;
    } 

    function substraction(uint256 a, uint256 b) public pure returns(uint256){
        return a-b;
    } 

    function multiplication(uint256 a, uint256 b) public pure returns(uint256){
        return a*b;
    }

    function setMessage(string memory newMessage) external payable{
        require (_owner == msg.sender, "Set MESSAGE ONLY OWNER FUNCTION");
        require (msg.value > 1 ," send some wei");
        _message=newMessage;
    }

    function transferOwnership(address newOwner) external{
        require(_owner== msg.sender , "only Owner function");
        _owner = newOwner;
    }

    function withdrawFunds(uint256 amount, address recipient) external payable{
        //require (_owner == msg.sender, "only OWNER FUNCTION");
        uint256 totalbalance = address (this).balance;
        require(amount<totalbalance,"insufficient balance");
        payable(recipient).transfer(amount);
        withdrawamount=withdrawamount+amount; 
           
       
    }


    function remainingbalance() external view returns(uint256){
        return address(this).balance;

    }


    function addUsers() public {
        require(Users[msg.sender]==false,"already added");
        Users[msg.sender]=true;

    }

    function setUsermsg(string memory newMsg) public{
        require(Users[msg.sender] == true,"false");
        _message=newMsg;

        
       // _msgAry.push(_message);
    }



   

}